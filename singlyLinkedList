#include <iostream>
using namespace std;
class Node {
public:
  int data;
  Node *next;
  Node(int data) {
    this->data = data;
    this->next = NULL;
  }
  ~Node() {
    int value = this->data;
    while (this->next != NULL) {
      delete next;
      this->next = NULL;
    }
    cout << "Memort is free for value " << value << endl;
  }
};
// insert at head
void insertAtHead(Node *&head, int data) {
  Node *temp = new Node(data);
  temp->next = head;
  head = temp;
}
// insert at tail
void insertAtTail(Node *&tail, int data) {
  Node *temp = new Node(data);
  tail->next = temp;
  tail = temp;
}
// insert at middle
void insertAtPosition(Node *&tail, Node *&head, int position, int data) {
  if (position == 1) {
    insertAtHead(head, data);
    return;
  }
  Node *temp = head;
  int cnt = 1;
  while (cnt < position - 1) {
    temp = temp->next;
    cnt++;
  }
  if (temp->next == NULL) {
    insertAtTail(tail, data);
    return;
  }
  Node *nodetoinsert = new Node(data);
  nodetoinsert->next = temp->next;
  temp->next = nodetoinsert;
}
// delete node
void deleteNode(Node *&tail, Node *&head, int pos) {
  if (pos == 1) {
    Node *temp = head;
    head = head->next;
    temp->next = NULL;
    delete temp;
  } else {
    Node *curr = head;
    Node *prev = NULL;
    int cnt = 1;
    while (cnt < pos) {
      prev = curr;
      curr = curr->next;
      cnt++;
    }
    prev->next = curr->next;
    curr->next = NULL;
    delete curr;
    Node *temp = head;
    while (temp->next != NULL) {
      temp = temp->next;
    }
    tail = temp;
    temp->next = NULL;
    delete temp->next;
  }
}
// print
void print(Node *&head) {
  Node *temp = head;
  while (temp != NULL) {
    cout << temp->data << " ";
    temp = temp->next;
  }
  cout << endl;
}
int main() {
  // creation of linked list
  Node *node1 = new Node(10);
  //  cout<<node1->data<<endl;
  // cout<<node1->next<<endl;
  Node *head = node1;
  Node *tail = node1;
  print(head);
  insertAtTail(tail, 12);
  print(head);
  insertAtTail(tail, 15);
  print(head);
  insertAtPosition(tail, head, 2, 14);
  print(head);
  // insertAtPosition(tail, head, 1, 9);
  // print(head);
  insertAtPosition(tail, head, 4, 3);
  print(head);
  deleteNode(tail, head, 5);
  print(head);
  cout << "Head = " << head->data << endl;
  cout << "Tail = " << tail->data << endl;
  deleteNode(tail, head, 4);
  print(head);
  cout << "Head = " << head->data << endl;
  cout << "Tail = " << tail->data << endl;
}
